package com.cabservice.location_service.Service;

import java.util.LinkedList;
import java.util.List;
import java.util.stream.Collector;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.geo.Circle;
import org.springframework.data.geo.Point;
import org.springframework.data.redis.core.GeoOperations;
import org.springframework.data.redis.core.RedisTemplate;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;

import com.cabservice.location_service.Model.GeoCoordinate;

@Service
public class LocationService {

	private final static String LOCATION_KEY = "locations";
	
	@Autowired
	private RedisTemplate<String, Object> redisTemplate; 
	
	public void saveLocation(Long userId,String role, Double latitude, Double longitude) {
		
		String geohash = encodeGeohash(latitude, longitude);
		GeoCoordinate location = new GeoCoordinate(userId, latitude, longitude, geohash,role );
		
		// save location to redis db
		redisTemplate.opsForValue().set(userId.toString(), location);
		
		// save geospatial data
		GeoOperations<String, Object> geoOps = redisTemplate.opsForGeo();
		geoOps.add(LOCATION_KEY, new Point( longitude ,latitude),userId);
		
	}
	
	public GeoCoordinate getLocation(Long userId) {
		return (GeoCoordinate) redisTemplate.opsForValue().get(userId.toString());
	}
	public GeoCoordinate getLocation(String userId) {
		return (GeoCoordinate) redisTemplate.opsForValue().get(userId);
	}
	
	public List<GeoCoordinate> getNearByLocations(Double latitude, Double longitude, Double radius){
		GeoOperations<String, Object> geoOps = redisTemplate.opsForGeo();
		Circle circle = new Circle(new Point(latitude, longitude), radius);
		List<Object> nearByUserIds = geoOps.radius(LOCATION_KEY, circle)
				.getContent()
				.stream().map(geoResult -> geoResult.getContent()).collect(Collectors.toList());
	
		List<GeoCoordinate> locations = new LinkedList<GeoCoordinate>();
		
		for(Object userId : nearByUserIds) {
			GeoCoordinate currentLoc= getLocation((String)userId );
			if(currentLoc.getRole() == "DRIVER")
				locations.add(currentLoc);
		}
		return locations;
	}
	
	
    private String encodeGeohash(double latitude, double longitude) {
        // Implement Geohash encoding logic or use a library
        return ""; // Return the geohash string
    }
}
